name: Documentation

on:
  pull_request:
  push:
    branches: main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    # Force to use color
    FORCE_COLOR: true
    BROWSER: /usr/bin/firefox
    DISPLAY: :99.0
    
permissions:
  contents: write

jobs:
  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
            python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install -e .
          python -m pip install .[doc,plotting]
      - name: Sphinx build
        id: build-docs
        run: |
          sphinx-build -b html doc_conf doc/_build/html
      - name: Upload documentation
        if: steps.build-docs.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: DocHTML
          path: doc/_build/html

  deploy_on_main:
    runs-on: ubuntu-latest
    needs: [build_docs]
    if: ${{ contains(fromJSON('["push", "workflow_dispatch", "schedule"]'), github.event_name)}}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: DocHTML
          path: doc/_build/html
      - name: Commit to main
        run: |
          git clone --depth 1 https://github.com/${{ github.repository_owner }}/hidimstat.git
          rm -Rf hidimstat/docs
          mkdir hidimstat/docs
          cp -r doc/_build/html/* hidimstat/docs
          cd hidimstat
          touch docs/.nojekyll
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub actions"
          git add .
          git commit -m "Update documentation" -a || true
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: main
          directory: hidimstat
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
  get_artifact:
    name: Deploy documentation  
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Wait for Specific CircleCI Job to Complete
        id: wait_for_circleci_job
        run: |
          CIRCLECI_TOKEN=${{ secrets.CIRCLECI_TOKEN }}
          CIRCLECI_PROJECT_SLUG="gh/lionelkusch/hidimstat"  # Replace with your CircleCI project slug
          CIRCLECI_JOB_NAME="build-doc"  # Replace with your specific job name

          # Get the latest pipeline ID
          PIPELINE_ID=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/pipeline" | jq -r '.items[0].id')

          # Poll the job status until it completes
          while true; do
            JOB_STATUS=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow" | jq -r --arg job_name "$CIRCLECI_JOB_NAME" '.items[] | select(.name == $job_name) | .status')
            if [[ "$JOB_STATUS" == "success" ]]; then
              echo "CircleCI job completed successfully."
              break
            elif [[ "$JOB_STATUS" == "failed" ]]; then
              echo "CircleCI job failed."
              exit 1
            else
              echo "CircleCI job is still running. Waiting..."
              sleep 30
            fi
          done

      - name: Get CircleCI Artifact URL
        id: get_artifact_url
        run: |
          CIRCLECI_TOKEN=${{ secrets.CIRCLECI_TOKEN }}
          CIRCLECI_PROJECT_SLUG="gh/lionelkusch/hidimstat"  # Replace with your CircleCI project slug
          CIRCLECI_JOB_NAME="python3"  # Replace with your specific job name

          # Get the latest pipeline ID
          echo "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/pipeline"
          PIPELINE_ID=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/pipeline" | jq -r '.items[0].id')

          # Get the latest workflow ID
          echo "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow"
          WORKFLOW_ID=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow" | jq -r '.items[0].id')

          # Get the job ID for the specific job
          echo "https://circleci.com/api/v2/workflow/$WORKFLOW_ID/job"
          JOB_ID=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/workflow/$WORKFLOW_ID/job" | jq -r --arg job_number "$CIRCLECI_JOB_NAME" '.items[] | select(.name == $job_number) | .id')

          # Get the artifact URL
          echo "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/job/$JOB_ID/artifacts" 
          ARTIFACT_URL=$(curl -s -H "Circle-Token: $CIRCLECI_TOKEN" "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/job/$JOB_ID/artifacts" | jq -r '.items[0].url')
          echo "::set-output name=artifact_url::$ARTIFACT_URL"

      - name: Download Artifact
        run: |
          ARTIFACT_URL=${{ steps.get_artifact_url.outputs.artifact_url }}
          curl -L -o artifact.zip "$ARTIFACT_URL"
          unzip artifact.zip -d ./artifact

      - name: List Artifact Contents
        run: ls -R ./artifact

      - name: Upload Artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: circleci-artifact
          path: ./artifact
  
  
  deploy_documentation:
    name: Deploy documentation  
    runs-on: ubuntu-latest
    needs: [get_artifact]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add SSH key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.ACTIONS_SSH_DEPLOY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/github_actions

      - uses: actions/download-artifact@v4
        with:
          name: circleci-artifact
          path: ./html

      - name: deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          COMMIT_SHA: ${{ github.event.head_commit.id }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub actions"
          ./build_tools/circle/push_doc.sh